//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ZHCC_GAPlanEntities : DbContext
    {
        public ZHCC_GAPlanEntities()
            : base("name=ZHCC_GAPlanEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActualSteps> ActualSteps { get; set; }
        public virtual DbSet<FlightTask> FlightTask { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RoleMenu> RoleMenu { get; set; }
        public virtual DbSet<TWFLibrary> TWFLibrary { get; set; }
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<OperationLog> OperationLog { get; set; }
        public virtual DbSet<ErrorLog> ErrorLog { get; set; }
        public virtual DbSet<CurrentFlightPlan> CurrentFlightPlan { get; set; }
        public virtual DbSet<V_CurrentPlan> V_CurrentPlan { get; set; }
        public virtual DbSet<Aircraft> Aircraft { get; set; }
        public virtual DbSet<Pilot> Pilot { get; set; }
        public virtual DbSet<LoginLog> LoginLog { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanySummary> CompanySummary { get; set; }
        public virtual DbSet<Advertisment> Advertisment { get; set; }
        public virtual DbSet<SupplyDemandInfo> SupplyDemandInfo { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Dictionary> Dictionary { get; set; }
        public virtual DbSet<TWFSteps> TWFSteps { get; set; }
        public virtual DbSet<RepetitivePlan> RepetitivePlan { get; set; }
        public virtual DbSet<vGetRepetitivePlanNodeInstance> vGetRepetitivePlanNodeInstance { get; set; }
        public virtual DbSet<FlightPlan> FlightPlan { get; set; }
        public virtual DbSet<vFlightPlan> vFlightPlan { get; set; }
        public virtual DbSet<FlyPlanDemo> FlyPlanDemo { get; set; }
        public virtual DbSet<BusyTime> BusyTime { get; set; }
        public virtual DbSet<vGetFlightPlanNodeInstance> vGetFlightPlanNodeInstance { get; set; }
        public virtual DbSet<RepetPlanNew> RepetPlanNew { get; set; }
        public virtual DbSet<vGetCurrentPlanNodeInstance> vGetCurrentPlanNodeInstance { get; set; }
        public virtual DbSet<AirportInfo> AirportInfo { get; set; }
        public virtual DbSet<CustomControlArea> CustomControlArea { get; set; }
        public virtual DbSet<File_Airport> File_Airport { get; set; }
        public virtual DbSet<File_Detail> File_Detail { get; set; }
        public virtual DbSet<File_FlightPlanMaster> File_FlightPlanMaster { get; set; }
        public virtual DbSet<File_Master> File_Master { get; set; }
        public virtual DbSet<FlightPlanOld> FlightPlanOld { get; set; }
        public virtual DbSet<RepetitivePlanOld> RepetitivePlanOld { get; set; }
        public virtual DbSet<TWFPerson> TWFPerson { get; set; }
        public virtual DbSet<vRepetitivePlanAirport> vRepetitivePlanAirport { get; set; }
    
        public virtual int pro_pageList(string tblName, string strGetFields, string fldName, Nullable<int> pageSize, Nullable<int> pageIndex, Nullable<bool> doCount, Nullable<bool> orderType, string strWhere)
        {
            var tblNameParameter = tblName != null ?
                new ObjectParameter("tblName", tblName) :
                new ObjectParameter("tblName", typeof(string));
    
            var strGetFieldsParameter = strGetFields != null ?
                new ObjectParameter("strGetFields", strGetFields) :
                new ObjectParameter("strGetFields", typeof(string));
    
            var fldNameParameter = fldName != null ?
                new ObjectParameter("fldName", fldName) :
                new ObjectParameter("fldName", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var doCountParameter = doCount.HasValue ?
                new ObjectParameter("doCount", doCount) :
                new ObjectParameter("doCount", typeof(bool));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(bool));
    
            var strWhereParameter = strWhere != null ?
                new ObjectParameter("strWhere", strWhere) :
                new ObjectParameter("strWhere", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pro_pageList", tblNameParameter, strGetFieldsParameter, fldNameParameter, pageSizeParameter, pageIndexParameter, doCountParameter, orderTypeParameter, strWhereParameter);
        }
    
        [DbFunction("ZHCC_GAPlanEntities", "ufSplitStr")]
        public virtual IQueryable<ufSplitStr_Result> ufSplitStr(string inputStr, string separator, Nullable<bool> removeEmpty, Nullable<bool> removeRepet)
        {
            var inputStrParameter = inputStr != null ?
                new ObjectParameter("InputStr", inputStr) :
                new ObjectParameter("InputStr", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("Separator", separator) :
                new ObjectParameter("Separator", typeof(string));
    
            var removeEmptyParameter = removeEmpty.HasValue ?
                new ObjectParameter("RemoveEmpty", removeEmpty) :
                new ObjectParameter("RemoveEmpty", typeof(bool));
    
            var removeRepetParameter = removeRepet.HasValue ?
                new ObjectParameter("RemoveRepet", removeRepet) :
                new ObjectParameter("RemoveRepet", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufSplitStr_Result>("[ZHCC_GAPlanEntities].[ufSplitStr](@InputStr, @Separator, @RemoveEmpty, @RemoveRepet)", inputStrParameter, separatorParameter, removeEmptyParameter, removeRepetParameter);
        }
    
        public virtual int upCatchErrorLog(ObjectParameter errorLogID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upCatchErrorLog", errorLogID);
        }
    
        public virtual int upCreateFlightPlanByTimePeriod(Nullable<System.DateTime> specifiedTime, Nullable<double> timePeriod)
        {
            var specifiedTimeParameter = specifiedTime.HasValue ?
                new ObjectParameter("SpecifiedTime", specifiedTime) :
                new ObjectParameter("SpecifiedTime", typeof(System.DateTime));
    
            var timePeriodParameter = timePeriod.HasValue ?
                new ObjectParameter("TimePeriod", timePeriod) :
                new ObjectParameter("TimePeriod", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upCreateFlightPlanByTimePeriod", specifiedTimeParameter, timePeriodParameter);
        }
    
        public virtual int upPrintErrorLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upPrintErrorLog");
        }
    }
}
